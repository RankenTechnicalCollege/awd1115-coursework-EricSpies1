// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesOrders.Data;

#nullable disable

namespace SalesOrders.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250922001533_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SalesOrders.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Accessories"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Bikes"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Components"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Car racks"
                        },
                        new
                        {
                            CategoryID = 6,
                            CategoryName = "Wheels"
                        });
                });

            modelBuilder.Entity("SalesOrders.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductDescLong")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductDescShort")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductQty")
                        .HasColumnType("int");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            ProductDescLong = "",
                            ProductDescShort = "",
                            ProductImage = "34-Viscount-C-500-Wireless-Bike-Computer.jpg",
                            ProductName = "Viscount C-500 Wireless Bike Computer",
                            ProductPrice = 49m,
                            ProductQty = 30
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 2,
                            ProductDescLong = "",
                            ProductDescShort = "",
                            ProductImage = "37-Viscount-Mountain-Bikes.jpg",
                            ProductName = "Viscount Mountain Bike",
                            ProductPrice = 635m,
                            ProductQty = 5
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 3,
                            ProductDescLong = "",
                            ProductDescShort = "",
                            ProductImage = "32-Ultra-Pro-Rain-Jacket.jpg",
                            ProductName = "Ultra-Pro Rain Jacket",
                            ProductPrice = 85m,
                            ProductQty = 30
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 4,
                            ProductDescLong = "",
                            ProductDescShort = "",
                            ProductImage = "01-AeroFlo-ATB-Wheels.jpg",
                            ProductName = "AeroFlo ATB Wheels",
                            ProductPrice = 189m,
                            ProductQty = 40
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 5,
                            ProductDescLong = "",
                            ProductDescShort = "",
                            ProductImage = "21-Road-Warrior-Hitch-Pack.jpg",
                            ProductName = "Road Warrior Hitch Pack",
                            ProductPrice = 175m,
                            ProductQty = 6
                        });
                });

            modelBuilder.Entity("SalesOrders.Models.Product", b =>
                {
                    b.HasOne("SalesOrders.Models.Category", "Category")
                        .WithOne("Product")
                        .HasForeignKey("SalesOrders.Models.Product", "CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SalesOrders.Models.Category", b =>
                {
                    b.Navigation("Product");
                });
#pragma warning restore 612, 618
        }
    }
}
